GameCraft AI Scribe - Development Roadmap (v8)

Goal: Evolve from the current functional prototype into a robust, user-friendly AI-assisted game development environment, particularly strong for Phaser 3 users, encompassing a wide range of developer aids and learning tools, before preparing for distribution.

‚úÖ Phase 1: Core Enhancements & Stability (Functionally Complete - Pending Polish)

Focus: Address critical usability gaps, enhance core debugging, ensure stability, complete basic I/O.

Status: All core features implemented. Final polish & testing phase required before moving on.

Key Features Implemented:

‚úÖ Project Saving & Loading (Local)

‚úÖ Enhanced Multi-File Support (Multiple .js + index.html) w/ File Explorer (in tab)

‚úÖ Phaser Console Log Access

‚úÖ Manual Game Preview Update (via "Run" Button)

‚úÖ Basic Project Export (Self-contained w/ assets)

‚úÖ Layout: Vertical Middle Panel (Resizable), Tabbed Right Panel (Files/Editor)

Remaining Tasks for Phase 1:

üîÑ UI Polish & Bug Fixing / Testing: IMMEDIATE & ONLY FOCUS for Phase 1

Thoroughly test ALL Phase 1 features: Save/Load, Export, Console Log, Preview ("Run" Button), File Management, Mode Switching.

Evaluate layout usability: Test resizing panels, test switching tabs. Ensure content display and responsiveness.

Fix any discovered bugs: Address glitches in functionality or display.

Improve loading indicators and user feedback consistency.

General code cleanup / consistency checks.

Phase 2: AI Precision, Learning Aids & Workflow

Focus: Enhance the core AI interaction quality, add learning tools, improve developer productivity. (To start after Phase 1 Polish is complete).

Prioritized Features:

‚≠ê "Explain Like I'm 5" (ELI5) Mode: (AI Interaction)

‚≠ê AI Line Number Awareness: (AI Precision - Requires careful testing)

‚≠ê Project Templates (incl. Minecraft Clone Tutorial): (Onboarding/Productivity)

Editor Enhancements: (Linting, Formatting)

Code Snippet Library (Local Storage): (Productivity)

Integrated Phaser Documentation Search: (Developer Aid)

Asset Manager Improvements: (Thumbnails, Paired Assets?)

Persistent Settings: (QoL - LocalStorage)

Basic Performance Monitoring: (FPS Counter)

Phase 3: Advanced AI, Polish & Sharing Foundations

Focus: Refine UX, add more sophisticated AI interactions, improve code quality tools, lay groundwork for potential online features. (Further Out).

Key Features: AI Conversation History, Advanced Editor (Search/Replace, Autocomplete), Contextual AI Prompts/Refactoring, AI Tutorials, Enhanced Onboarding, Cloud Saving/Accounts, Simple Project Sharing, Template Sharing.

Future Considerations / Phase X: Advanced, Experimental & Specialized Features

Focus: Explore cutting-edge integrations, highly complex features, community aspects, specialized tooling. (Long Term / Post-MVP).

Key Features: Full AI Game Creation (Planner/Executor/Checker), AI-Assisted Tilemap Editor, Version Control, Build/Deployment Integration (Web), Collaboration, State Machine Viz, Accessibility Checker, Visual Editor Elements, Integrated Debugger, Support for Other Engines.

Post-Development / Distribution Phase (Separate Effort)

Focus: Packaging the completed web application for easy installation and launch by end-users, independent of the development environment.

Potential Tasks:

Application Packaging: Using frameworks like Electron or Tauri to create native desktop installers (.exe, .app, .deb, etc.).

Dependency Bundling: Ensuring necessary runtimes (potentially lightweight Python/Node) are included or handled by the installer.

Configuration Management: Handling API key input or other configurations in the packaged app.

Auto-Updates: Implementing mechanisms for updating the packaged application.

Creating Desktop Shortcuts/Icons: The final step for the one-click launch experience.
