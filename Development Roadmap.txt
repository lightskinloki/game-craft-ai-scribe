GameCraft AI Scribe - Updated Development Roadmap (v6 - Incorporating Priorities)

Goal: Evolve from the current functional prototype into a robust, user-friendly AI-assisted game development environment, particularly strong for Phaser 3 users, encompassing a wide range of developer aids and learning tools.

‚úÖ Phase 1: Core Enhancements & Stability (Functionally Complete)

Focus: Address critical usability gaps, enhance core debugging, ensure stability, complete basic I/O.

Status: Core features implemented. Final polish/bug-fixing needed.

Key Features Implemented: Local Project Save/Load, Basic Multi-File Support, Phaser Console Log Access, Auto Game Preview, Basic Project Export.

Remaining Tasks:

üîÑ UI Polish & Bug Fixing: IMMEDIATE FOCUS (Fix Layouts, Improve Load States, Optional Launch Button).

Phase 2: AI Precision, Learning Aids & Workflow

Focus: Enhance the core AI interaction quality, add learning tools, improve developer productivity.

Prioritized Features:

‚≠ê "Explain Like I'm 5" (ELI5) Mode: (High Priority)

Implement UI toggle.

Implement backend prompt modification.

‚≠ê AI Line Number Awareness: (High Priority - Requires careful testing)

Implement frontend preprocessing in handlePromptSubmit to add NNN: prefixes to code sent to backend.

Update backend structured_prompt to instruct AI on using/omitting these prefixes.

Thoroughly test impact on AI output quality and potential token usage issues.

‚≠ê Project Templates (incl. Minecraft Clone Tutorial): (High Priority)

Develop the actual code content for the template(s).

Implement template selection UI.

Implement logic in Index.tsx to load selected template into files state.

Editor Enhancements:

Linting (ESLint Integration).

Formatting (Prettier Integration).

Code Snippet Library (Local Storage):

Implement snippet management UI/logic.

Implement editor insertion.

Use localStorage.

Integrated Phaser Documentation Search:

Implement docs search UI/logic.

Asset Manager Improvements:

Display image thumbnails.

(Optional: Paired asset handling).

Persistent Settings:

Use localStorage for various UI/mode states.

Basic Performance Monitoring:

Display simple FPS counter.

Phase 3: Advanced AI, Polish & Sharing Foundations (Further Out)

Focus: Refine UX, add more sophisticated AI interactions, improve code quality tools, lay groundwork for online features.

Key Features: AI Conversation History, Advanced Editor (Search/Replace, Autocomplete), Contextual AI Prompts/Refactoring, AI Tutorials, Onboarding, Cloud Saving/Accounts, Sharing, Template Sharing.

Future Considerations / Phase X: Advanced & Experimental Features (Long Term)

Focus: Explore cutting-edge integrations, highly complex features, community aspects, specialized tooling.

Key Features: Full AI Game Creation (Planner/Executor/Checker), AI Tilemap Editor, Version Control, Build/Deploy Tools, Collaboration, State Machine Viz, Accessibility Checker, Visual Editors, Debugger, Other Engines.

Updated Next Steps:

Complete Phase 1 Polish & Bug Fixing: Ensure the current feature set is stable and usable.

Implement ELI5 Mode: Relatively straightforward start to Phase 2.

Implement AI Line Number Awareness: Tackle this next due to its impact on AI interaction quality. 

Develop Minecraft Clone Template & Implement Template Feature: Work on the template content and the loading mechanism concurrently or sequentially.
