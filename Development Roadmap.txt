GameCraft AI Scribe - Updated Development Roadmap

Goal: Evolve from the current functional prototype into a robust, user-friendly AI-assisted game development environment, particularly strong for Phaser 3 users.

Phase 1: Core Enhancements & Stability (Nearing Completion)

Focus: Address critical usability gaps, enhance the core debugging experience, and ensure a stable foundation.

Status: Core features implemented. Focus shifts to ensuring the new reactive preview works well and implementing remaining Phase 1 items.

Key Features:

‚úÖ Project Saving & Loading (Local): DONE

‚úÖ Basic Multi-File Support (game.js, index.html)

‚úÖ Phaser Console Log Access: DONE

‚úÖ Game Preview - Automatic Update: DONE (Implemented via useEffect in GamePreview.tsx. Replaced manual "Run Game" button).

üîÑ UI Polish & Bug Fixing: IN PROGRESS / NEXT FOCUS

Evaluate Auto-Preview Performance & UX: Test if the automatic preview refresh is smooth and responsive, or if it feels laggy/disruptive during rapid typing. Consider if an optional manual refresh/run button might still be desirable for some users or complex projects (could be added later in Phase 2 if needed).

Address other known layout issues, component glitches, or inconsistencies (especially around the new Tabbed layout if implemented).

Improve loading states and user feedback (e.g., during AI processing, file saving/loading).

Implement the simple "Launch Application" button (Header) - Lower priority.

‚è≥ Basic Project Export: PENDING

Add "Export Project" button.

Implement ZIP creation (code files + assets).

Phase 2: Feature Deepening & Workflow Improvements

Focus: Build upon the stable core by enhancing the editor, asset management, and AI interaction.

Key Features: (Priority within Phase 2 can be adjusted)

Editor Enhancements:

Linting (ESLint Integration).

Formatting (Prettier Integration).

AI Conversation History:

Implement session-based history panel.

(Optional: Context sending).

Asset Manager Improvements:

Display image thumbnails.

(Optional: Paired asset handling).

Project Templates:

Define & implement basic templates.

Persistent Settings:

Use localStorage for theme, mode, layout sizes.

Phase 3: Polish, Sharing & Advanced Features

Focus: Refine UX, explore sharing/deployment, add advanced AI capabilities. (Further out)

Key Features:

Advanced Editor Features: (Search/Replace, Phaser Autocompletion).

Cloud Saving & User Accounts: (Significant undertaking).

Simple Project Sharing: (Requires cloud saving).

Contextual AI Prompts: ("Refactor this", "Explain function").

Enhanced Onboarding/Tutorial.

Future Considerations / Phase X: Advanced & Experimental Features

Focus: Explore cutting-edge integrations once the core app is mature.

Key Features:

AI-Assisted Tilemap Editor (Experimental / Long-Term).

Version Control Integration.

Build/Deployment Integration.

Collaboration Features.

Visual Editor Elements.

Integrated Debugger.

Support for Other Engines.

Revised Immediate Next Steps:

Verify & Evaluate Auto-Preview: Thoroughly test the automatic preview update. Does it work reliably? Is it performant enough? Does it feel good to use while coding? Address any bugs specifically related to this reactive update.

Implement Basic Project Export: This is the last major feature planned for Phase 1.

General UI Polish/Bug Fixing: Address any other smaller issues, refine the layout (especially the tabbed middle panel if you implemented it), and improve loading indicators.
